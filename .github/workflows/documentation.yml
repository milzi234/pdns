---
name: 'Documentation'

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]
  workflow_dispatch: {}
 
permissions:
  contents: read
  pull-requests: write

env:
  FORCE_JAVASCRIPT_ACTIONS_TO_NODE20: true

jobs:
  build-docs:
    name: Build docs
    runs-on: ubuntu-22.04
    env:
      SERVICE_IP_ADDR: 127.0.0.1
      BRANCH_NAME: ${{ github.ref_name }}
    services:
      database:
        image: epicwink/proxpi
        ports:
          - 5000:5000
        options: >-
          --restart always
    outputs:
      pdns_version: ${{ steps.get-version.outputs.pdns_version }}
      pip-list-auth: ${{ steps.pip-logs-auth.outputs.list-auth }}
      pip-list-rec: ${{ steps.pip-logs-rec.outputs.list-rec }}
      pip-list-dnsdist: ${{ steps.pip-logs-dnsdist.outputs.list-dnsdist }}
    steps:
      - uses: PowerDNS/pdns/set-ubuntu-mirror@meta
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - run: pip config set global.index-url http://${{ env.SERVICE_IP_ADDR }}:5000/index/
      - run: pip config set global.trusted-host ${{ env.SERVICE_IP_ADDR }}
      - id: proxpi-docker
        run: echo "id=$(docker ps | grep "epicwink/proxpi" | awk '{print $1}')" >> "$GITHUB_OUTPUT"
      - run: build-scripts/gh-actions-setup-inv-no-dist-upgrade
      - run: inv install-doc-deps
      - run: inv install-doc-deps-pdf

      - id: get-version
        run: |
          echo "pdns_version=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      # Build Auth docs
      - run: inv ci-docs-build
      - run: mv html auth-html-docs
        working-directory: ./docs/_build
      - run: tar cf auth-html-docs.tar auth-html-docs
        working-directory: ./docs/_build
      - uses: actions/upload-artifact@v4
        with:
          name: authoritative-html-docs-${{steps.get-version.outputs.pdns_version}}
          path: ./docs/_build/auth-html-docs.tar
      - run: inv ci-docs-build-pdf
      - uses: actions/upload-artifact@v4
        with:
          name: PowerDNS-Authoritative-${{steps.get-version.outputs.pdns_version}}.pdf
          path: ./docs/_build/latex/PowerDNS-Authoritative.pdf
      - run: docker logs ${{ steps.proxpi-docker.outputs.id }} 2>&1 | grep whl | awk '{print $8}' | cut -d "/" -f 4 | awk -F'-' '{print $1"=="$2}' | sort -u --ignore-case > /tmp/proxpi-auth.log
      - id: pip-logs-auth
        run: echo "list-auth=$(cat /tmp/proxpi-auth.log | base64 -w0)" >> "$GITHUB_OUTPUT"
      - run: sudo sh -c "truncate -s 0 /var/lib/docker/containers/${{ steps.proxpi-docker.outputs.id }}*/${{ steps.proxpi-docker.outputs.id }}*-json.log"
      - name: Copy PDF to HTML docs directory
        run: |
          cp ./docs/_build/latex/PowerDNS-Authoritative.pdf ./docs/_build/auth-html-docs/

      # Build Rec docs
      - run: inv ci-docs-rec-generate
        working-directory: ./pdns/recursordist/settings
      - run: inv ci-docs-build
        working-directory: ./pdns/recursordist
      - run: mv html rec-html-docs
        working-directory: ./pdns/recursordist/docs/_build
      - run: tar cf rec-html-docs.tar rec-html-docs
        working-directory: ./pdns/recursordist/docs/_build
      - uses: actions/upload-artifact@v4
        with:
          name: recursor-html-docs-${{steps.get-version.outputs.pdns_version}}
          path: ./pdns/recursordist/docs/_build/rec-html-docs.tar
      - run: inv ci-docs-build-pdf
        working-directory: ./pdns/recursordist
      - uses: actions/upload-artifact@v4
        with:
          name: PowerDNS-Recursor-${{steps.get-version.outputs.pdns_version}}.pdf
          path: ./pdns/recursordist/docs/_build/latex/PowerDNS-Recursor.pdf
      - run: docker logs ${{ steps.proxpi-docker.outputs.id }} 2>&1 | grep whl | awk '{print $8}' | cut -d "/" -f 4 | awk -F'-' '{print $1"=="$2}' | sort -u --ignore-case > /tmp/proxpi-rec.log
      - id: pip-logs-rec
        run: echo "list-rec=$(cat /tmp/proxpi-rec.log | base64 -w0)" >> "$GITHUB_OUTPUT"
      - run: sudo sh -c "truncate -s 0 /var/lib/docker/containers/${{ steps.proxpi-docker.outputs.id }}*/${{ steps.proxpi-docker.outputs.id }}*-json.log"
      - name: Copy PDF to HTML docs directory
        run: |
          cp ./pdns/recursordist/docs/_build/latex/PowerDNS-Recursor.pdf ./pdns/recursordist/docs/_build/rec-html-docs/

      # Build DNSdist docs
      - run: inv ci-docs-build
        working-directory: ./pdns/dnsdistdist
      - run: mv html dnsdist-html-docs
        working-directory: ./pdns/dnsdistdist/docs/_build
      - run: tar cf dnsdist-html-docs.tar dnsdist-html-docs
        working-directory: ./pdns/dnsdistdist/docs/_build
      - uses: actions/upload-artifact@v4
        with:
          name: dnsdist-html-docs-${{steps.get-version.outputs.pdns_version}}
          path: ./pdns/dnsdistdist/docs/_build/dnsdist-html-docs.tar
      - run: inv ci-docs-build-pdf
        working-directory: ./pdns/dnsdistdist
      - uses: actions/upload-artifact@v4
        with:
          name: dnsdist-${{steps.get-version.outputs.pdns_version}}.pdf
          path: ./pdns/dnsdistdist/docs/_build/latex/dnsdist.pdf
      - run: docker logs ${{ steps.proxpi-docker.outputs.id }} 2>&1 | grep whl | awk '{print $8}' | cut -d "/" -f 4 | awk -F'-' '{print $1"=="$2}' | sort -u --ignore-case > /tmp/proxpi-dnsdist.log
      - id: pip-logs-dnsdist
        run: echo "list-dnsdist=$(cat /tmp/proxpi-dnsdist.log | base64 -w0)" >> "$GITHUB_OUTPUT"
      - name: Copy PDF to HTML docs directory
        run: |
          cp ./pdns/dnsdistdist/docs/_build/latex/dnsdist.pdf ./pdns/dnsdistdist/docs/_build/dnsdist-html-docs/

  publish-to-netlify:
    name: Publish to Netlify
    needs: build-docs
    if: ${{ vars.PUBLISH_DOCS_TO_NETLIFY == 'true' && (github.ref_name == 'master' || vars.PUBLISH_PRS_TO_NETLIFY == 'true') }}
    runs-on: ubuntu-22.04
    env:
      NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_API_TOKEN }}
      NETLIFY_SITE_ID_AUTH: ${{ secrets.NETLIFY_SITE_ID_AUTH }}
      NETLIFY_SITE_ID_REC: ${{ secrets.NETLIFY_SITE_ID_REC }}
      NETLIFY_SITE_ID_DNSDIST: ${{ secrets.NETLIFY_SITE_ID_DNSDIST }}
    steps:
      - name: Check required secrets
        run: |
          missing_secrets=()
          [ -z "$NETLIFY_AUTH_TOKEN" ] && missing_secrets+=("NETLIFY_API_TOKEN")
          [ -z "$NETLIFY_SITE_ID_AUTH" ] && missing_secrets+=("NETLIFY_SITE_ID_AUTH")
          [ -z "$NETLIFY_SITE_ID_REC" ] && missing_secrets+=("NETLIFY_SITE_ID_REC")
          [ -z "$NETLIFY_SITE_ID_DNSDIST" ] && missing_secrets+=("NETLIFY_SITE_ID_DNSDIST")
          if [ ${#missing_secrets[@]} -ne 0 ]; then
            echo "Error: The following secrets are missing: ${missing_secrets[*]}"
            exit 1
          fi
      - name: Install Netlify
        run: npm install netlify-cli@17.36.3 -g
      - uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Deploy Auth docs to Netlify
        run: |
          tar -xf artifacts/authoritative-html-docs-${{needs.build-docs.outputs.pdns_version}}/auth-html-docs.tar
          prod_flag=""
          if [ "${{ github.ref_name }}" = "master" ]; then prod_flag="--prod"; fi
          netlify deploy \
            --dir ./auth-html-docs \
            --site $NETLIFY_SITE_ID_AUTH \
            --auth $NETLIFY_AUTH_TOKEN \
            $prod_flag \
            --json \
            > netlify_deploy_auth_output.json

      - name: Deploy Recursor docs to Netlify
        run: |
          tar -xf artifacts/recursor-html-docs-${{needs.build-docs.outputs.pdns_version}}/rec-html-docs.tar
          prod_flag=""
          if [ "${{ github.ref_name }}" = "master" ]; then prod_flag="--prod"; fi
          netlify deploy \
            --dir ./rec-html-docs \
            --site $NETLIFY_SITE_ID_REC \
            --auth $NETLIFY_AUTH_TOKEN \
            $prod_flag \
            --json \
            > netlify_deploy_rec_output.json

      - name: Deploy DNSdist docs to Netlify
        run: |
          tar -xf artifacts/dnsdist-html-docs-${{needs.build-docs.outputs.pdns_version}}/dnsdist-html-docs.tar
          prod_flag=""
          if [ "${{ github.ref_name }}" = "master" ]; then prod_flag="--prod"; fi
          netlify deploy \
            --dir ./dnsdist-html-docs \
            --site $NETLIFY_SITE_ID_DNSDIST \
            --auth $NETLIFY_AUTH_TOKEN \
            $prod_flag \
            --json \
            > netlify_deploy_dnsdist_output.json

      - name: Generate URL Previews
        id: url_previews
        if: ${{ github.ref_name != 'master' }}
        run: |
          if [ -f netlify_deploy_auth_output.json ]; then
            AUTH_PREVIEW_URL=$(jq -r '.deploy_url' netlify_deploy_auth_output.json)
            echo "AUTH_PREVIEW_URL=$AUTH_PREVIEW_URL" >> "$GITHUB_OUTPUT"
          fi
          if [ -f netlify_deploy_rec_output.json ]; then
            REC_PREVIEW_URL=$(jq -r '.deploy_url' netlify_deploy_rec_output.json)
            echo "REC_PREVIEW_URL=$REC_PREVIEW_URL" >> "$GITHUB_OUTPUT"
          fi
          if [ -f netlify_deploy_dnsdist_output.json ]; then
            DNSDIST_PREVIEW_URL=$(jq -r '.deploy_url' netlify_deploy_dnsdist_output.json)
            echo "DNSDIST_PREVIEW_URL=$DNSDIST_PREVIEW_URL" >> "$GITHUB_OUTPUT"
          fi

      - name: Comment URL Previews on PR
        uses: actions/github-script@v7
        if: ${{ github.ref_name != 'master' }}
        env:
          AUTH_PREVIEW_URL: ${{ steps.url_previews.outputs.AUTH_PREVIEW_URL }}
          REC_PREVIEW_URL: ${{ steps.url_previews.outputs.REC_PREVIEW_URL }}
          DNSDIST_PREVIEW_URL: ${{ steps.url_previews.outputs.DNSDIST_PREVIEW_URL }}
        with:
          script: |
            async function comment(){
              const result = await github.rest.repos.listPullRequestsAssociatedWithCommit({
                owner: context.repo.owner,
                repo: context.repo.repo,
                commit_sha: context.sha,
              })

              const issueNumber = result.data[0].number

              if(issueNumber){
                let commentBody = 'Preview URLs:\n'
                if (process.env.AUTH_PREVIEW_URL) {
                  commentBody += `- Authoritative: ${process.env.AUTH_PREVIEW_URL}\n`
                }
                if (process.env.REC_PREVIEW_URL) {
                  commentBody += `- Recursor: ${process.env.REC_PREVIEW_URL}\n`
                }
                if (process.env.DNSDIST_PREVIEW_URL) {
                  commentBody += `- DNSdist: ${process.env.DNSDIST_PREVIEW_URL}\n`
                }

                await github.rest.issues.createComment({
                  issue_number: issueNumber,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: commentBody
                })
              } else {
                console.log('No PR found for commit ' + context.sha)
              }
            }

            comment()

  publish-to-web1:
    name: Publish to Web1
    needs: build-docs
    if: ${{ github.ref_name == 'master' && vars.PUBLISH_DOCS_TO_WEB1 == 'true' }}
    runs-on: ubuntu-22.04
    steps:
      - name: Check required secrets
        run: |
          missing_secrets=()
          [ -z "${{ secrets.WEB1_DOCS_SECRET }}" ] && missing_secrets+=("WEB1_DOCS_SECRET")
          [ -z "${{ vars.WEB1_HOSTKEY }}" ] && missing_secrets+=("WEB1_HOSTKEY")
          [ -z "${{ vars.DOCS_HOST }}" ] && missing_secrets+=("DOCS_HOST")
          [ -z "${{ vars.AUTH_DOCS_DIR }}" ] && missing_secrets+=("AUTH_DOCS_DIR")
          [ -z "${{ vars.REC_DOCS_DIR }}" ] && missing_secrets+=("REC_DOCS_DIR")
          if [ ${#missing_secrets[@]} -ne 0 ]; then
            echo "Error: The following secrets/variables are missing: ${missing_secrets[*]}"
            exit 1
          fi
      - uses: actions/download-artifact@v4
        with:
          path: artifacts
      - id: setup-ssh
        run: |-
          inv ci-docs-add-ssh --ssh-key="$SSH_KEY" --host-key="$HOST_KEY"
        env:
          SSH_KEY: ${{secrets.WEB1_DOCS_SECRET}}
          HOST_KEY: ${{vars.WEB1_HOSTKEY}}
      - name: Publish Auth docs
        run: |
          tar -xf artifacts/authoritative-html-docs-${{needs.build-docs.outputs.pdns_version}}/auth-html-docs.tar
          inv ci-docs-upload-master --docs-host="${DOCS_HOST}" --pdf="PowerDNS-Authoritative.pdf" --username="docs_powerdns_com" --product="auth" --directory="/${AUTH_DOCS_DIR}/"
        env:
          DOCS_HOST: ${{vars.DOCS_HOST}}
          AUTH_DOCS_DIR: ${{vars.AUTH_DOCS_DIR}}
      - name: Publish Recursor docs
        run: |
          tar -xf artifacts/recursor-html-docs-${{needs.build-docs.outputs.pdns_version}}/rec-html-docs.tar
          inv ci-docs-upload-master --docs-host="${DOCS_HOST}" --pdf="PowerDNS-Recursor.pdf" --username="docs_powerdns_com" --product="rec" --directory="/${REC_DOCS_DIR}/"
        env:
          DOCS_HOST: ${{vars.DOCS_HOST}}
          REC_DOCS_DIR: ${{vars.REC_DOCS_DIR}}
      - name: Publish DNSdist docs
        run: |
          tar -xf artifacts/dnsdist-html-docs-${{needs.build-docs.outputs.pdns_version}}/dnsdist-html-docs.tar
          inv ci-docs-upload-master --docs-host="${DOCS_HOST}" --pdf="dnsdist.pdf" --username="dnsdist_org" --product="dnsdist"
        env:
          DOCS_HOST: ${{vars.DOCS_HOST}}

  publish-to-aws:
    name: Publish to AWS
    needs: build-docs
    if: ${{ github.ref_name == 'master' && vars.PUBLISH_DOCS_TO_AWS == 'true' }}
    runs-on: ubuntu-22.04
    steps:
      - name: Check required secrets
        run: |
          missing_secrets=()
          [ -z "${{ secrets.AWS_ACCESS_KEY_ID }}" ] && missing_secrets+=("AWS_ACCESS_KEY_ID")
          [ -z "${{ secrets.AWS_SECRET_ACCESS_KEY }}" ] && missing_secrets+=("AWS_SECRET_ACCESS_KEY")
          [ -z "${{ vars.AWS_REGION }}" ] && missing_secrets+=("AWS_REGION")
          [ -z "${{ vars.DOCS_S3_BUCKET }}" ] && missing_secrets+=("DOCS_S3_BUCKET")
          [ -z "${{ vars.DNSDIST_CLOUDFRONT_DISTRIBUTION_ID }}" ] && missing_secrets+=("DNSDIST_CLOUDFRONT_DISTRIBUTION_ID")
          [ -z "${{ vars.DOCS_CLOUDFRONT_DISTRIBUTION_ID }}" ] && missing_secrets+=("DOCS_CLOUDFRONT_DISTRIBUTION_ID")
          if [ ${#missing_secrets[@]} -ne 0 ]; then
            echo "Error: The following secrets/variables are missing: ${missing_secrets[*]}"
            exit 1
          fi
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v3
        with:
          node-version: '20'
      - name: Install AWS SDK v3
        run: npm install @aws-sdk/client-s3 @aws-sdk/client-cloudfront
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      - name: Publish to AWS
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ vars.AWS_REGION }}
          DOCS_S3_BUCKET: ${{ vars.DOCS_S3_BUCKET }}
          DNSDIST_CLOUDFRONT_DISTRIBUTION_ID: ${{ vars.DNSDIST_CLOUDFRONT_DISTRIBUTION_ID }}
          DOCS_CLOUDFRONT_DISTRIBUTION_ID: ${{ vars.DOCS_CLOUDFRONT_DISTRIBUTION_ID }}
        run: |
          if [ -n "$DNSDIST_CLOUDFRONT_DISTRIBUTION_ID" ]; then
            tar -xf artifacts/dnsdist-html-docs-${{needs.build-docs.outputs.pdns_version}}/dnsdist-html-docs.tar
            node .github/scripts/publish.js publish dnsdist.org dnsdist-html-docs /
          fi
          if [ -n "$DOCS_CLOUDFRONT_DISTRIBUTION_ID" ]; then
            tar -xf artifacts/recursor-html-docs-${{needs.build-docs.outputs.pdns_version}}/rec-html-docs.tar
            node .github/scripts/publish.js publish docs.powerdns.com rec-html-docs /recursor
            tar -xf artifacts/authoritative-html-docs-${{needs.build-docs.outputs.pdns_version}}/auth-html-docs.tar
            node .github/scripts/publish.js publish docs.powerdns.com auth-html-docs /authoritative
            node .github/scripts/publish.js publish docs.powerdns.com website/docs.powerdns.com
          fi

  validate-pip-hashes:
    name: Validate list of packages and hashes
    runs-on: ubuntu-22.04
    needs: build-docs
    steps:
      - uses: actions/checkout@v4
      - run: for i in `echo "${{ needs.build-docs.outputs.pip-list-auth }}" | base64 -d | sed 's/_/-/' | egrep -v "pip==|setuptools==|wheel==|setuptools-git=="`; do grep -qq -i $i docs/requirements.txt || ( echo "$i not found" && exit 1 ); done
      - run: for i in `echo "${{ needs.build-docs.outputs.pip-list-rec }}" | base64 -d | sed 's/_/-/' | egrep -v "pip==|setuptools==|wheel==|setuptools-git=="`; do grep -qq -i $i docs/requirements.txt || ( echo "$i not found" && exit 1 ); done
        working-directory: ./pdns/recursordist
      - run: for i in `echo "${{ needs.build-docs.outputs.pip-list-dnsdist }}" | base64 -d | sed 's/_/-/' | egrep -v "pip==|setuptools==|wheel==|setuptools-git=="`; do grep -qq -i $i docs/requirements.txt || ( echo "$i not found" && exit 1 ); done
        working-directory: ./pdns/dnsdistdist
